    logV <- V * nrow(data)
    
    list(times=times, S=S, V=V, logV=logV)
}

fit1 <- ahrUser(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), user.survfit=sfit, user.param=list())

fit2 <- ahrKM(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), cov=TRUE)

expect_equal(fit1$surv.fit[[1]]$S, fit2$surv.fit[[1]]$S)
expect_equal(fit1$surv.fit[[2]]$S, fit2$surv.fit[[2]]$S)
expect_equal(fit1$surv.fit[[1]]$logV, fit2$surv.fit[[1]]$logV)
expect_equal(fit1$surv.fit[[2]]$logV, fit2$surv.fit[[2]]$logV)
f(times)
f2(times)
g(times)
g2(times)
T <- c(rexp(100, 1), rexp(100, 2))
C <- c(rexp(100, 1), rexp(100, 2))
time <- pmin(T, C)
status <- T <= C
trt <- rep(c(0,1), c(100, 100)) # treatment indicator

sfit <- function(times, data, param) {
    fit <- survfit(Surv(Y, D) ~ 1, data=data)
    f <- approxfun(fit$time, fit$surv, method="constant", f=0, yleft=1, rule=2)
    fv <- approxfun(fit$time, fit$std.err^2, method="constant", f=0, yleft=0, rule=2)

    S <- f(times)
    V <- fv(times)
        
    dlogS <- 1/S
    dlogS[S == 0] <- 0
    logV <- V * nrow(data)
    
    list(times=times, S=S, V=V, logV=logV)
}

fit1 <- ahrUser(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), user.survfit=sfit, user.param=list())

fit2 <- ahrKM(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), cov=TRUE)

expect_equal(fit1$surv.fit[[1]]$S, fit2$surv.fit[[1]]$S)
expect_equal(fit1$surv.fit[[2]]$S, fit2$surv.fit[[2]]$S)
expect_equal(fit1$surv.fit[[1]]$logV, fit2$surv.fit[[1]]$logV)
expect_equal(fit1$surv.fit[[2]]$logV, fit2$surv.fit[[2]]$logV)
fit1$surv.fit[[1]]$S
fit1$surv.fit[[2]]$logV
fit2$surv.fit[[2]]$logV
T <- c(rexp(100, 1), rexp(100, 2))
C <- c(rexp(100, 1), rexp(100, 2))
time <- pmin(T, C)
status <- T <= C
trt <- rep(c(0,1), c(100, 100)) # treatment indicator

sfit <- function(times, data, param) {
    fit <- survfit(Surv(Y, D) ~ 1, data=data)
    f <- approxfun(fit$time, fit$surv, method="constant", f=0, yleft=1, rule=2)
    fv <- approxfun(fit$time, fit$std.err^2, method="constant", f=0, yleft=0, rule=2)

    S <- f(times)
    V <- fv(times)
        
    dlogS <- 1/S
    dlogS[S == 0] <- 0
    logV <- V * nrow(data)
    logV[S == 0] <- 0
    
    list(times=times, S=S, V=V, logV=logV)
}

fit1 <- ahrUser(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), user.survfit=sfit, user.param=list())

fit2 <- ahrKM(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), cov=TRUE)

expect_equal(fit1$surv.fit[[1]]$S, fit2$surv.fit[[1]]$S)
expect_equal(fit1$surv.fit[[2]]$S, fit2$surv.fit[[2]]$S)
expect_equal(fit1$surv.fit[[1]]$logV, fit2$surv.fit[[1]]$logV)
expect_equal(fit1$surv.fit[[2]]$logV, fit2$surv.fit[[2]]$logV)
fit1$surv.fit[[2]]$logV
fit1$surv.fit[[1]]$logV
fit2$surv.fit[[1]]$logV
T <- c(rexp(100, 1), rexp(100, 2))
C <- c(rexp(100, 1), rexp(100, 2))
time <- pmin(T, C)
status <- T <= C
trt <- rep(c(0,1), c(100, 100)) # treatment indicator

sfit <- function(times, data, param) {
    fit <- survfit(Surv(Y, D) ~ 1, data=data)
    f <- approxfun(fit$time, fit$surv, method="constant", f=0, yleft=1, rule=2)
    fv <- approxfun(fit$time, fit$std.err^2, method="constant", f=0, yleft=0, rule=2)

    S <- f(times)
    V <- fv(times)
        
    dlogS <- 1/S
    dlogS[S == 0] <- 0
    logV <- V * nrow(data)
    logV[S == 0] <- 0
    
    list(times=times, S=S, V=V, logV=logV)
}

fit1 <- ahrUser(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), user.survfit=sfit, user.param=list())

fit2 <- ahrKM(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), cov=TRUE)

expect_equal(fit1$surv.fit[[1]]$S, fit2$surv.fit[[1]]$S)
expect_equal(fit1$surv.fit[[2]]$S, fit2$surv.fit[[2]]$S)
expect_equal(fit1$surv.fit[[1]]$logV, fit2$surv.fit[[1]]$logV)
expect_equal(fit1$surv.fit[[2]]$logV, fit2$surv.fit[[2]]$logV)
fit2$surv.fit[[1]]$logV
fit2$surv.fit[[2]]$logV
T <- c(rexp(100, 1), rexp(100, 2))
C <- c(rexp(100, 1), rexp(100, 2))
time <- pmin(T, C)
status <- T <= C
trt <- rep(c(0,1), c(100, 100)) # treatment indicator

sfit <- function(times, data, param) {
    fit <- survfit(Surv(Y, D) ~ 1, data=data)
    f <- approxfun(fit$time, fit$surv, method="constant", f=0, yleft=1, rule=2)
    fv <- approxfun(fit$time, fit$std.err^2, method="constant", f=0, yleft=0, rule=2)

    S <- f(times)
    V <- fv(times)
        
    dlogS <- 1/S
    dlogS[S == 0] <- 0
    logV <- V * nrow(data)
    logV[S == 0] <- 0
    
    list(times=times, S=S, V=V, logV=logV)
}

fit1 <- ahrUser(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), user.survfit=sfit, user.param=list())

fit2 <- ahrKM(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), cov=TRUE)

expect_equal(fit1$surv.fit[[1]]$S, fit2$surv.fit[[1]]$S)
expect_equal(fit1$surv.fit[[2]]$S, fit2$surv.fit[[2]]$S)
expect_equal(fit1$surv.fit[[1]]$logV, fit2$surv.fit[[1]]$logV)
expect_equal(fit1$surv.fit[[2]]$logV, fit2$surv.fit[[2]]$logV)
fit2$surv.fit[[2]]$logV
fit2$surv.fit[[1]]$logV
fit1$surv.fit[[1]]$logV
fit2$surv.fit[[1]]$logV
T <- c(rexp(100, 1), rexp(100, 2))
C <- c(rexp(100, 1), rexp(100, 2))
time <- pmin(T, C)
status <- T <= C
trt <- rep(c(0,1), c(100, 100)) # treatment indicator

sfit <- function(times, data, param) {
    fit <- survfit(Surv(Y, D) ~ 1, data=data)
    f <- approxfun(fit$time, fit$surv, method="constant", f=0, yleft=1, rule=2)
    fv <- approxfun(fit$time, fit$std.err^2, method="constant", f=0, yleft=0, rule=2)

    S <- f(times)
    V <- fv(times)
        
    dlogS <- 1/S
    dlogS[S == 0] <- 0
    logV <- V * nrow(data)
    logV[S == 0] <- 0
    
    list(times=times, S=S, V=V, logV=logV)
}

fit1 <- ahrUser(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), user.survfit=sfit, user.param=list())

fit2 <- ahrKM(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), cov=TRUE)

expect_equal(fit1$surv.fit[[1]]$S, fit2$surv.fit[[1]]$S)
expect_equal(fit1$surv.fit[[2]]$S, fit2$surv.fit[[2]]$S)
expect_equal(fit1$surv.fit[[1]]$logV, fit2$surv.fit[[1]]$logV)
expect_equal(fit1$surv.fit[[2]]$logV, fit2$surv.fit[[2]]$logV)
fit2$surv.fit[[1]]$logV
T <- c(rexp(100, 1), rexp(100, 2))
C <- c(rexp(100, 1), rexp(100, 2))
time <- pmin(T, C)
status <- T <= C
trt <- rep(c(0,1), c(100, 100)) # treatment indicator

sfit <- function(times, data, param) {
    fit <- survfit(Surv(Y, D) ~ 1, data=data)
    f <- approxfun(fit$time, fit$surv, method="constant", f=0, yleft=1, rule=2)
    fv <- approxfun(fit$time, fit$std.err^2, method="constant", f=0, yleft=0, rule=2)

    S <- f(times)
    V <- fv(times)
        
    dlogS <- 1/S
    dlogS[S == 0] <- 0
    logV <- V * nrow(data)
    logV[S == 0] <- 0
    
    list(times=times, S=S, V=V, logV=logV)
}

fit1 <- ahrUser(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), user.survfit=sfit, user.param=list())

fit2 <- ahrKM(2, Surv(time, status) ~ trt, data.frame(time=time, status=status, trt=trt), cov=TRUE)

expect_equal(fit1$surv.fit[[1]]$S, fit2$surv.fit[[1]]$S)
expect_equal(fit1$surv.fit[[2]]$S, fit2$surv.fit[[2]]$S)
expect_equal(fit1$surv.fit[[1]]$logV, fit2$surv.fit[[1]]$logV)
expect_equal(fit1$surv.fit[[2]]$logV, fit2$surv.fit[[2]]$logV)
fit2$surv.fit[[1]]$logV
fit
str(fit)
fit$S
    test.data <- function(n) {
        T <- rexp(n, 0.1)
        C <- runif(n, 0, 10)
        X <- pmin(T, C)
        D <- as.numeric(T <= C)
        V <- runif(n, 0, X/4) 

        status <- T <= C
        D[D == 0] <- "cens"
        
        data.frame(time=X, from=0, to=D, id=1:n, status=status)
    }
    
    data <- test.data(100)
    tra <- matrix(FALSE, nrow=2, ncol=2)
    tra[1, 2] <- TRUE
              
    times <- seq(0, 5, length.out=10) ##c(1.5, 3)

    data <- data[order(data$time),]
  
    ##S <- exp(-times/10)

    fs <- survfit(Surv(time, status) ~ 1, data=data)

param <- list(target="0 1", states=c("0", "1"), transitions=tra,
                                          censoring="cens", s=0, t="last", covariance=TRUE)
times <- sort(data$time)
    states <- param$states
    tra <- param$transitions
    
    ## empirical transition matrix / Aalen-Johansen estimator
    fit <- etm::etm(data, states, tra, param$censoring, s=param$s, t=param$t, covariance=param$cov)
    
    ## convert target string to state numbers
    tmp <- strsplit(param$target, split=NULL)[[1]]
    from.to <- c(which(tmp[1] == states), which(tmp[3] == states))

    F <- pmax(0, 1 - fit$est[from.to[1],from.to[2],])    
    S <- evalFun(times, fit$time, F)

S
F
    fit <- aj(sort(data$time), data, list(target="0 1", states=c("0", "1"), transitions=tra,
                                          censoring="cens", s=0, t="last", covariance=TRUE))

    
    f <- approxfun(fs$time, fs$surv, method="constant", yleft=1, rule=2, f=0)
    f2 <- approxfun(fs$time, fit$S, method="constant", yleft=1, rule=2, f=0)
    g <- approxfun(fs$time, (fs$surv * fs$std.err)^2, method="constant", yleft=0, rule=2, f=0)
    g2 <- approxfun(fs$time, fit$V, method="constant", yleft=0, rule=2, f=0)

fit$S
fit$S == S
f(times)
f2(times)
F
str(fit)
  fit.etm <- etm::etm(data, states, tra, param$censoring, s=param$s, t=param$t, covariance=param$cov)
fit.etm
states
from.to
tmp
fit$est
fit.etm$est
fit.etm$est[1,2,]
fit.etm$est[1,3,]
dim(fit.etm$est)
fit.etm$est[2,2,]
fit.etm$est[1,2,]
1-fit.etm$est[1,2,]
length(1-fit.etm$est[1,2,])
fs
fs$time
data
data[data$to == 1,]
length(data[data$to == 1,])
length(data[data$to == 1,]$time)
length(fs$time)
1-fit.etm$est[1,2,]
sort(data$time[data$status])
names(1-fit.etm$est[1,2,])
as.numeric(names(1-fit.etm$est[1,2,]))
all.equal(as.numeric(names(1-fit.etm$est[1,2,])), sort(data$time[data$status]))
fs$time
fs$surv
times
times == fs$time
all.equal(times, fs$time)
times
data$time
evtime <- as.numeric(names(1-fit.etm$est[1,2,]))
evtime
fs$time[2]
fs$surv[2]
fit.etm$est[1,2,1]
fit.etm$est[1,2,2]
1-fit.etm$est[1,2,2]
    data <- data.frame(id=1:10, time=1:10, from=0, to=1, status=TRUE)
data
    fs <- survfit(Surv(time, status) ~ 1, data=data)
fs
fs$time
fs$surv
param <- list(target="0 1", states=c("0", "1"), transitions=tra,
                                          censoring="cens", s=0, t="last", covariance=TRUE)
    fit <- etm::etm(data, states, tra, param$censoring, s=param$s, t=param$t, covariance=param$cov)
tra
states
data
fit$est[1,2,]
1-fit$est[1,2,]
data$status
data$status[1] <- FALSE
    fit <- etm::etm(data, states, tra, param$censoring, s=param$s, t=param$t, covariance=param$cov)
    fs <- survfit(Surv(time, status) ~ 1, data=data)
fs$surv
fs$time
1-fit$est[1,2,]
    fit <- etm::etm(data, states, tra, param$censoring, s=param$s, t=param$t, covariance=param$cov)
1-fit$est[1,2,]
data
1-fit$est[2,2,]
1-fit$est[1,1,]
1-fit$est[1,2,]
data$to[1]
data$to[1] <- "cens"
    fit <- etm::etm(data, states, tra, param$censoring, s=param$s, t=param$t, covariance=param$cov)
1-fit$est[1,2,]
fs$surv
?etm
test.etm()
test.etm <- function() {
    data <- data.frame(id=1:10, time=1:10, from=0, to=1, status=TRUE)

    tra <- matrix(FALSE, nrow=2, ncol=2)
    tra[1, 2] <- TRUE

    fit.km <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data$to[1] <- "cens"
    data$status[1] <- FALSE

    fit.km2 <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm2 <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data.frame(time=fit.km2$time[data$status], surv=fit.km2$surv[data$status], etm=fit.etm2$est[1,2,])
}

test.etm()
test.etm <- function() {
    data <- data.frame(id=1:10, time=1:10, from=0, to=1, status=TRUE)

    tra <- matrix(FALSE, nrow=2, ncol=2)
    tra[1, 2] <- TRUE

    fit.km <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data$to[1] <- "cens"
    data$status[1] <- FALSE

    fit.km2 <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm2 <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data.frame(time=fit.km2$time[data$status], surv=fit.km2$surv[data$status], etm=1-fit.etm2$est[1,2,])
}

test.etm()
    data <- data.frame(id=1:10, time=1:10, from=0, to=1, status=TRUE)

    tra <- matrix(FALSE, nrow=2, ncol=2)
    tra[1, 2] <- TRUE

    fit.km <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data$to[1] <- "cens"
    data$status[1] <- FALSE

    fit.km2 <- survfit(Surv(time, status) ~ 1, data=data[-1,])
fit.km2$surv
data[-1,]
test.etm <- function() {
    data <- data.frame(id=1:10, time=1:10, from=0, to=1, status=TRUE)

    tra <- matrix(FALSE, nrow=2, ncol=2)
    tra[1, 2] <- TRUE

    fit.km <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data$to[2] <- "cens"
    data$status[2] <- FALSE

    fit.km2 <- survfit(Surv(time, status) ~ 1, data=data[-1,])
    fit.etm2 <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data.frame(time=fit.km2$time[data$status], surv=fit.km2$surv[data$status], etm=1-fit.etm2$est[1,2,])
}

test.etm()
test.etm <- function() {
    data <- data.frame(id=1:10, time=1:10, from=0, to=1, status=TRUE)

    tra <- matrix(FALSE, nrow=2, ncol=2)
    tra[1, 2] <- TRUE

    fit.km <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data$to[2] <- "cens"
    data$status[2] <- FALSE

    fit.km2 <- survfit(Surv(time, status) ~ 1, data=data[-1,])
    fit.etm2 <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data.frame(time=fit.km2$time[data$status], surv=fit.km2$surv[data$status], etm=1-fit.etm2$est[1,2,],
               time2=as.numeric(names(fit.etm2$est[1,2,])))
}

test.etm()
 test.etm <- function() {
    data <- data.frame(id=1:10, time=1:10, from=0, to=1, status=TRUE)

    tra <- matrix(FALSE, nrow=2, ncol=2)
    tra[1, 2] <- TRUE

    fit.km <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data$to[2] <- "cens"
    data$status[2] <- FALSE

    fit.km2 <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm2 <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data.frame(time=fit.km2$time[data$status], surv=fit.km2$surv[data$status], etm=1-fit.etm2$est[1,2,],
               time2=as.numeric(names(fit.etm2$est[1,2,])))
}

test.etm()
test.etm <- function(j=1) {
    data <- data.frame(id=1:10, time=1:10, from=0, to=1, status=TRUE)

    tra <- matrix(FALSE, nrow=2, ncol=2)
    tra[1, 2] <- TRUE

    fit.km <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data$to[j] <- "cens"
    data$status[j] <- FALSE

    fit.km2 <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm2 <- etm::etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data.frame(time=fit.km2$time[data$status], surv=fit.km2$surv[data$status], etm=1-fit.etm2$est[1,2,],
               time2=as.numeric(names(fit.etm2$est[1,2,])))
}

test.etm()
test.etm(2)
test.etm(3)
test.etm(10)
test.etm(8)
test.etm()
test.etm(10)
test.etm(5)
test.etm(9)
test.etm()
test.etm()
test.etm(1)
test.etm(2)
test.etm(4)
test.etm(1)
install.packages("etm")
test.etm <- function(j=1) {
    data <- data.frame(id=1:10, time=1:10, from=0, to=1, status=TRUE)

    tra <- matrix(FALSE, nrow=2, ncol=2)
    tra[1, 2] <- TRUE

    data$to[j] <- "cens"
    data$status[j] <- FALSE

    fit.km <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm <- etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data.frame(time=fit.km$time[data$status],
               km=fit.km$surv[data$status],         
               time2=as.numeric(names(fit.etm$est[1,2,])),
               etm=1-fit.etm$est[1,2,])
}

test.etm()
library(survfit)
library(survival)
test.etm()
library(etm)
test.etm()
test.etm <- function(j=1) {
    data <- data.frame(id=1:10, time=1:10, from=0, to=1, status=TRUE)

    tra <- matrix(FALSE, nrow=2, ncol=2)
    tra[1, 2] <- TRUE

    data$to[j] <- "cens"
    data$status[j] <- FALSE

    fit.km <- survfit(Surv(time, status) ~ 1, data=data)
    fit.etm <- etm(data, c("0","1"), tra, "cens", s=0, t="last", covariance=FALSE)

    data.frame(time=fit.km$time[data$status],
               km=fit.km$surv[data$status],         
               time2=as.numeric(names(fit.etm$est[1,2,data$status])),
               etm=1-fit.etm$est[1,2,data$status])
}

test.etm()
